import aiohttp
from aiogram import types
from aiogram.dispatcher.filters import CommandStart
from aiogram.utils.exceptions import BadRequest

import config
from keyboards import keyboard
from loader import dp, db
from utils import rate_limit
from utils.emoji import translate

@rate_limit(limit=5)
@dp.message_handler(CommandStart())
async def start_app(message: types.Message):
    await db.add_user(message.from_user.full_name, message.from_user.id)
    text = '\n'.join([f'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}!',
                      f'‚òÄ –Ø —Å–º–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ! ‚òÄ',
                      f'–ü–µ—Ä–µ–¥–∞–π –º–Ω–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                      f'–õ–∏–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞'])

    try:
        # –õ–æ–≤–∏–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–∞–∂–∞–ª —Å—Ç–∞—Ä—Ç –≤ –∫–∞–Ω–∞–ª–µ, –∞ –Ω–µ –≤ –±–æ—Ç–µ
        await message.answer(text, reply_markup=keyboard)
    except BadRequest:
        text = '\n'.join([f'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}!',
                          f'‚òÄ –Ø —Å–º–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ! ‚òÄ',
                          f'–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞ üòè'])
        await message.answer(text)


async def get(url):
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ —É—Ä–ª—É
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            return await response.json()

@rate_limit(limit=3)
@dp.message_handler()
async def weather_city(message: types.Message):
    url = f'https://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={config.APPID}&units=metric'

    response = await get(url)
    try:
        description = response['weather'][0]['main']
    except KeyError:
        await message.answer('–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ –º–æ–µ–º —Å–ø–∏—Å–∫–µüòî \n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!üòä')
        return

    description_on_russian, emoji = translate(description)

    answer = f'''
        –ì–æ—Ä–æ–¥: {message.text.title()}, 
        \n–û–ø–∏—Å–∞–Ω–∏–µ: {emoji} {description_on_russian} {emoji},
        \n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {response['main']['temp']} ¬∞C,
        \n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {response['wind']['speed']} –º/—Å
    '''
    await message.answer(answer)


@dp.message_handler(content_types=types.ContentType.LOCATION)
async def get_location(message: types.Message):
    location = message.location
    lat = location.latitude
    lon = location.longitude
    url = f'https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={config.APPID}&units=metric'
    response = await get(url)
    description = response['weather'][0]['main']
    description_on_russian, emoji = translate(description)

    answer = f'''
        –ì–æ—Ä–æ–¥: {response['name']}
        \n–û–ø–∏—Å–∞–Ω–∏–µ: {emoji} {description_on_russian} {emoji}
        \n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {response['main']['temp']} ¬∞C
        \n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {response['wind']['speed']} –º/—Å
    '''
    await message.answer(answer)
